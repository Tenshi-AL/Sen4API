using System.ComponentModel;
using System.Security.Claims;
using Infrastructure.DTO;
using Infrastructure.Interfaces;
using Infrastructure.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using Sen4.Authorizations;
using Sen4.Filters;
using Sen4.Hubs;

namespace Sen4.Controllers;

[ApiController]
[Authorize]
[Route("[controller]")]
public class ProjectController(IAuthorizationService authorizationService,IProjectService projectService, IUserService userService, IHubContext<NotificationHub> notificationHub): ControllerBase
{
    /// <summary>
    /// Generate invite token
    /// </summary>
    /// <param name="id">project id</param>
    /// <response code="200">Success </response>
    /// <response code="401">Authorization error</response>
    [HttpPost(":generateInviteToken/{id}")]
    [Description("This method generate invite token")]
    [ProducesResponseType(typeof(string),StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    public async Task<IActionResult> GenerateInviteToken(Guid id)
    {
        var authorizationResult = await authorizationService.AuthorizeAsync(User, id, APIOperations.ProjectGenerateInviteToken);
        if (!authorizationResult.Succeeded) return Forbid();
        
        var token = projectService.GenerateInviteToken(id);
        
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await notificationHub.Clients.User(userId!).SendAsync("notification", "Success generate token!" );
        return Ok(token);
    }

    /// <summary>
    /// Join to project by invite token
    /// </summary>
    /// <param name="joinModel">Invite token generated by method GenerateInviteToken</param>
    /// <response code="200">Success </response>
    /// <response code="401">Authorization error</response>
    /// <response code="400">Bad request</response>
    [HttpPost(":join/{token}")]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> Join(string token)
    {
        var userEmail = User.FindFirstValue(ClaimTypes.Name);
        var result = await projectService.JoinToProject(token: token, userEmail: userEmail);
        return result ? Ok() : BadRequest();
    }
    
    /// <summary>
    /// Get project by id
    /// </summary>
    /// <param name="id">Project id</param>
    /// <response code="200">Success</response>
    /// <response code="401">Authorization error</response>
    /// <response code="204">No content</response>
    /// <response code="403">Forbidden</response>
    [HttpGet("{id}")]
    [Description("This method return information about project")]
    [ProducesResponseType(typeof(ProjectReadDTO), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(StatusCodes.Status403Forbidden)]
    public async Task<IActionResult> Get(Guid id)
    {
        var authorizationResult = await authorizationService.AuthorizeAsync(User, id, APIOperations.ProjectGet);
        if (!authorizationResult.Succeeded) return Forbid();
        
        var result = await projectService.Get(id);
        return Ok(result);
    }
    
    /// <summary>
    /// Create project.
    /// </summary>
    /// <param name="projectWriteDto">Project info</param>
    /// <response code="201">Success </response>
    /// <response code="401">Authorization error</response>
    /// <response code="400">Some error in project body</response>
    [HttpPost]
    [Idempotent(nameof(projectWriteDto), nameof(requestId))]
    [ProducesResponseType(typeof(ProjectReadDTO), StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    public async Task<IActionResult> Post([FromBody] ProjectWriteDTO projectWriteDto, [FromHeader] Guid requestId)
    {
        var userEmail = User.FindFirstValue(ClaimTypes.Name);
        var currentUser = await userService.GetUserByEmail(userEmail);
        var result = await projectService.Create(projectWriteDto,currentUser.Id);
        
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await notificationHub.Clients.User(userId!).SendAsync("notification", "Success create project!");
        
        return CreatedAtAction(nameof(Get), new { id = result.Id }, result);
    }
    
    /// <summary>
    /// Method not implemented.
    /// </summary>
    [HttpPut]
    [ProducesResponseType(StatusCodes.Status405MethodNotAllowed)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    public IActionResult Put()
    {
        return StatusCode(StatusCodes.Status405MethodNotAllowed);
    }
    
    /// <summary>
    /// Patch project.
    /// </summary>
    /// <param name="id">Project id</param>
    /// <param name="projectUpdateDto">Project body</param>
    /// <response code="200">Success patch</response>
    /// <response code="400">Error in json patch document</response>
    /// <response code="401">Unauthorized</response>
    /// <response code="404">Project by id not found</response>
    /// <response code="403">Forbidden</response>
    /// <response code="409">Duplicate request</response>
    [HttpPatch("{id}")]
    [Description("This method edit information about project")]
    [Idempotent(nameof(projectUpdateDto), nameof(requestId))]
    [ProducesResponseType(typeof(Guid), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status403Forbidden)]
    [ProducesResponseType(StatusCodes.Status409Conflict)]
    public async Task<IActionResult> Patch(Guid id, [FromBody]JsonPatchDocument<ProjectWriteDTO> projectUpdateDto, [FromHeader] Guid requestId)
    {
        var authorizationResult = await authorizationService.AuthorizeAsync(User, id, APIOperations.ProjectPatch);
        if (!authorizationResult.Succeeded) return Forbid();
        
        var result = await projectService.PatchUpdate(id,projectUpdateDto);

        if (result is not null)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            await notificationHub.Clients.User(userId!).SendAsync("notification", "Success update project!");
            return Ok(result);
        }

        return NotFound();
    }
    
    /// <summary>
    /// Soft delete project by id
    /// </summary>
    /// <param name="id">Project id</param>
    /// <response code="200">Success soft delete</response>
    /// <response code="409">Project already deleted or not found</response>
    /// <response code="401">Unauthorized</response>
    /// <response code="403">Forbidden</response>
    [HttpDelete("{id}")]
    [Description("This method archieve project.")]
    [ProducesResponseType(typeof(Guid),StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status409Conflict)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(StatusCodes.Status403Forbidden)]
    public async Task<IActionResult> Delete(Guid id)
    {
        var authorizationResult = await authorizationService.AuthorizeAsync(User, id, APIOperations.ProjectDelete);
        if (!authorizationResult.Succeeded) return Forbid();
        
        var result = await projectService.Archiving(id);
        if (result is not null)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            await notificationHub.Clients.User(userId!).SendAsync("notification", "Success delete project!");
            return Ok(result);
        }
        return StatusCode(StatusCodes.Status409Conflict);
    }
    
    /// <summary>
    /// Get project list
    /// </summary>
    /// <param name="projectListRequest">Project request parameters</param>
    /// <response code="200">Success</response>
    /// <response code="401">Unauthorized</response>
    [HttpGet("List")]
    [ProducesResponseType(typeof(List<PaginatedList<ProjectReadDTO>>),StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    public async Task<IActionResult> List([FromQuery] ProjectListRequest projectListRequest)
    {
        var userEmail = User.FindFirstValue(ClaimTypes.Name);
        var currentUser = await userService.GetUserByEmail(userEmail!);
        projectListRequest.UserId = currentUser!.Id;
        
        var result = await projectService.List(projectListRequest);
        return Ok(result);
    }
}